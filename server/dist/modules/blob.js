"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const math_1 = require("./math");
const settings_1 = __importDefault(require("./settings"));
class Blob {
    constructor(pos = new math_1.Vec2()) {
        this.pos = pos;
        this._radius = 5;
        this._mass = 0; // calculated when constructor is called
        this.quadrants = [];
        this.velocity = new math_1.Vec2();
        this.direction = new math_1.Vec2();
        this.color = math_1.Color.colors[(0, math_1.randInt)(0, math_1.Color.colors.length - 1)];
        this.radius = this._radius;
    }
    destroy() {
    }
    get radius() {
        return this._radius;
    }
    ;
    get mass() {
        return this._mass;
    }
    ;
    set radius(r) {
        this._radius = r;
        this._mass = Math.round(Math.PI * (Math.pow(r, 2)));
    }
    ;
    set mass(s) {
        this._mass = s;
        this._radius = Math.round(Math.sqrt(s / Math.PI));
    }
    ;
    static evaporate(blobs) {
        for (let blob of blobs) {
            if (blob.mass > 10) {
                blob.mass *= 0.99;
            }
        }
    }
    static calcQuadrants(blobs) {
        const quadrants = [];
        for (let blob of blobs) {
            const box = {
                tL: new math_1.Vec2(),
                bR: new math_1.Vec2(),
                qTL: new math_1.Vec2(),
                qBR: new math_1.Vec2()
            };
            box.tL = blob.pos.sub(new math_1.Vec2(blob.radius, blob.radius));
            box.bR = blob.pos.add(new math_1.Vec2(blob.radius, blob.radius));
            box.qTL = new math_1.Vec2(Math.floor(box.tL.x / 256), Math.floor(box.tL.y / 256));
            box.qBR = new math_1.Vec2(Math.floor(box.bR.x / 256), Math.floor(box.bR.y / 256));
            const rows = settings_1.default.mapSize / 256;
            for (let x = box.qTL.x; x < box.qBR.x; x++) {
                for (let y = box.qTL.y; y < box.qBR.y; y++) {
                    quadrants.push(x * rows + y);
                }
            }
            blob.quadrants = quadrants;
        }
    }
}
exports.default = Blob;
;
// const Blob = new Blob(6, 9);
// // Blob.radius = 10;
// Blob.mass = 20;
// console.log(`Radius: ${Blob.radius}, mass area: ${Blob.mass}`)
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2R1bGVzL2Jsb2IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxpQ0FBOEM7QUFDOUMsMERBQWtDO0FBRWxDLE1BQXFCLElBQUk7SUFtRXJCLFlBQW1CLE1BQVksSUFBSSxXQUFJLEVBQUU7UUFBdEIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFsRWpDLFlBQU8sR0FBVyxDQUFDLENBQUM7UUFDcEIsVUFBSyxHQUFXLENBQUMsQ0FBQyxDQUFDLHdDQUF3QztRQUM1RCxjQUFTLEdBQWEsRUFBRSxDQUFDO1FBQ3pCLGFBQVEsR0FBUyxJQUFJLFdBQUksRUFBRSxDQUFDO1FBQzVCLGNBQVMsR0FBUyxJQUFJLFdBQUksRUFBRSxDQUFDO1FBQzdCLFVBQUssR0FBVSxZQUFLLENBQUMsTUFBTSxDQUFDLElBQUEsY0FBTyxFQUFDLENBQUMsRUFBRSxZQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBOERwRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDL0IsQ0FBQztJQTdERCxPQUFPO0lBRVAsQ0FBQztJQUVELElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBQUEsQ0FBQztJQUVGLElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBQUEsQ0FBQztJQUVGLElBQUksTUFBTSxDQUFDLENBQVM7UUFDaEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxTQUFBLENBQUMsRUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUFBLENBQUM7SUFFRixJQUFJLElBQUksQ0FBQyxDQUFTO1FBQ2QsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUFBLENBQUM7SUFFRixNQUFNLENBQUMsU0FBUyxDQUFDLEtBQWE7UUFDMUIsS0FBSSxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDbkIsSUFBRyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsRUFBRTtnQkFDZixJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQzthQUNyQjtTQUNKO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBYTtRQUM5QixNQUFNLFNBQVMsR0FBYSxFQUFFLENBQUM7UUFFL0IsS0FBSSxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDbkIsTUFBTSxHQUFHLEdBQUc7Z0JBQ1IsRUFBRSxFQUFFLElBQUksV0FBSSxFQUFFO2dCQUNkLEVBQUUsRUFBRSxJQUFJLFdBQUksRUFBRTtnQkFDZCxHQUFHLEVBQUUsSUFBSSxXQUFJLEVBQUU7Z0JBQ2YsR0FBRyxFQUFFLElBQUksV0FBSSxFQUFFO2FBQ2xCLENBQUM7WUFFRixHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksV0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDMUQsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFdBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBRTFELEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxXQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDdkUsR0FBRyxDQUFDLEdBQUcsR0FBRyxJQUFJLFdBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUV2RSxNQUFNLElBQUksR0FBRyxrQkFBUSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7WUFFcEMsS0FBSSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZDLEtBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUN2QyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ2hDO2FBQ0o7WUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztTQUM5QjtJQUNMLENBQUM7Q0FLSjtBQXRFRCx1QkFzRUM7QUFBQSxDQUFDO0FBRUYsK0JBQStCO0FBQy9CLHVCQUF1QjtBQUN2QixrQkFBa0I7QUFDbEIsaUVBQWlFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sb3IsIFZlYzIsIHJhbmRJbnQgfSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQgc2V0dGluZ3MgZnJvbSAnLi9zZXR0aW5ncyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJsb2Ige1xuICAgIHByaXZhdGUgX3JhZGl1czogbnVtYmVyID0gNTtcbiAgICBwcml2YXRlIF9tYXNzOiBudW1iZXIgPSAwOyAvLyBjYWxjdWxhdGVkIHdoZW4gY29uc3RydWN0b3IgaXMgY2FsbGVkXG4gICAgcHVibGljIHF1YWRyYW50czogbnVtYmVyW10gPSBbXTtcbiAgICBwdWJsaWMgdmVsb2NpdHk6IFZlYzIgPSBuZXcgVmVjMigpO1xuICAgIHB1YmxpYyBkaXJlY3Rpb246IFZlYzIgPSBuZXcgVmVjMigpO1xuICAgIHB1YmxpYyBjb2xvcjogQ29sb3IgPSBDb2xvci5jb2xvcnNbcmFuZEludCgwLCBDb2xvci5jb2xvcnMubGVuZ3RoIC0gMSldO1xuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgZ2V0IHJhZGl1cygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmFkaXVzO1xuICAgIH07XG5cbiAgICBnZXQgbWFzcygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFzcztcbiAgICB9O1xuXG4gICAgc2V0IHJhZGl1cyhyOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fcmFkaXVzID0gcjtcbiAgICAgICAgdGhpcy5fbWFzcyA9IE1hdGgucm91bmQoTWF0aC5QSSAqIChyICoqIDIpKTtcbiAgICB9O1xuXG4gICAgc2V0IG1hc3MoczogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX21hc3MgPSBzO1xuICAgICAgICB0aGlzLl9yYWRpdXMgPSBNYXRoLnJvdW5kKE1hdGguc3FydChzIC8gTWF0aC5QSSkpO1xuICAgIH07XG5cbiAgICBzdGF0aWMgZXZhcG9yYXRlKGJsb2JzOiBCbG9iW10pIHtcbiAgICAgICAgZm9yKGxldCBibG9iIG9mIGJsb2JzKSB7XG4gICAgICAgICAgICBpZihibG9iLm1hc3MgPiAxMCkge1xuICAgICAgICAgICAgICAgIGJsb2IubWFzcyAqPSAwLjk5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGNhbGNRdWFkcmFudHMoYmxvYnM6IEJsb2JbXSkge1xuICAgICAgICBjb25zdCBxdWFkcmFudHM6IG51bWJlcltdID0gW107XG5cbiAgICAgICAgZm9yKGxldCBibG9iIG9mIGJsb2JzKSB7XG4gICAgICAgICAgICBjb25zdCBib3ggPSB7XG4gICAgICAgICAgICAgICAgdEw6IG5ldyBWZWMyKCksXG4gICAgICAgICAgICAgICAgYlI6IG5ldyBWZWMyKCksXG4gICAgICAgICAgICAgICAgcVRMOiBuZXcgVmVjMigpLFxuICAgICAgICAgICAgICAgIHFCUjogbmV3IFZlYzIoKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgYm94LnRMID0gYmxvYi5wb3Muc3ViKG5ldyBWZWMyKGJsb2IucmFkaXVzLCBibG9iLnJhZGl1cykpO1xuICAgICAgICAgICAgYm94LmJSID0gYmxvYi5wb3MuYWRkKG5ldyBWZWMyKGJsb2IucmFkaXVzLCBibG9iLnJhZGl1cykpO1xuXG4gICAgICAgICAgICBib3gucVRMID0gbmV3IFZlYzIoTWF0aC5mbG9vcihib3gudEwueC8yNTYpLCBNYXRoLmZsb29yKGJveC50TC55LzI1NikpO1xuICAgICAgICAgICAgYm94LnFCUiA9IG5ldyBWZWMyKE1hdGguZmxvb3IoYm94LmJSLngvMjU2KSwgTWF0aC5mbG9vcihib3guYlIueS8yNTYpKTtcblxuICAgICAgICAgICAgY29uc3Qgcm93cyA9IHNldHRpbmdzLm1hcFNpemUgLyAyNTY7XG5cbiAgICAgICAgICAgIGZvcihsZXQgeCA9IGJveC5xVEwueDsgeCA8IGJveC5xQlIueDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgZm9yKGxldCB5ID0gYm94LnFUTC55OyB5IDwgYm94LnFCUi55OyB5KyspIHtcbiAgICAgICAgICAgICAgICAgICAgcXVhZHJhbnRzLnB1c2goeCAqIHJvd3MgKyB5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJsb2IucXVhZHJhbnRzID0gcXVhZHJhbnRzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHVibGljIHBvczogVmVjMiA9IG5ldyBWZWMyKCkpIHtcbiAgICAgICAgdGhpcy5yYWRpdXMgPSB0aGlzLl9yYWRpdXM7XG4gICAgfVxufTtcblxuLy8gY29uc3QgQmxvYiA9IG5ldyBCbG9iKDYsIDkpO1xuLy8gLy8gQmxvYi5yYWRpdXMgPSAxMDtcbi8vIEJsb2IubWFzcyA9IDIwO1xuLy8gY29uc29sZS5sb2coYFJhZGl1czogJHtCbG9iLnJhZGl1c30sIG1hc3MgYXJlYTogJHtCbG9iLm1hc3N9YCkiXX0=