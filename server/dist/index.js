"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ws_1 = __importDefault(require("ws"));
const express_1 = __importDefault(require("express"));
const path_1 = require("path");
const player_1 = __importDefault(require("./modules/player"));
const math_1 = require("./modules/math");
const socket_1 = require("./modules/socket");
const app = (0, express_1.default)();
app.use(express_1.default.static((0, path_1.join)(__dirname, "../", "../", "public")));
console.log(__dirname);
const server = app.listen(6969, '0.0.0.0', () => {
    console.log("Ready!");
});
const wss = new ws_1.default.Server({ server });
const players = [];
const blobs = [];
wss.on('connection', (socket, req) => {
    const player = new player_1.default(socket, "Unnamed Player", new math_1.Vec2((0, math_1.randInt)(1000, 1200), (0, math_1.randInt)(1000, 1200)));
    players.push(player);
    console.log(`${player.name} joined!`);
});
// Timing things; nightmare! YEET
setInterval(() => {
    for (let player of players) {
        player.velocity = player.direction;
        player.pos = player.pos.add(player.velocity);
        (0, socket_1.playerUpdate)(player.socket, [player], true);
        for (let player2 of players) {
            if (player2.pos.distance(player.pos) > 1000) {
                (0, socket_1.playerUpdate)(player2.socket, [player]);
            }
        }
    }
}, 1000 / 20);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsc0RBQThCO0FBQzlCLCtCQUEyQjtBQUMzQiw4REFBc0M7QUFDdEMseUNBQStDO0FBQy9DLDZDQUFnRDtBQUVoRCxNQUFNLEdBQUcsR0FBRyxJQUFBLGlCQUFPLEdBQUUsQ0FBQztBQUV0QixHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFPLENBQUMsTUFBTSxDQUFDLElBQUEsV0FBSSxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVqRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXZCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUU7SUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sR0FBRyxHQUFHLElBQUksWUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFFdEMsTUFBTSxPQUFPLEdBQWEsRUFBRSxDQUFDO0FBQzdCLE1BQU0sS0FBSyxHQUFXLEVBQUUsQ0FBQztBQUV6QixHQUFHLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUNqQyxNQUFNLE1BQU0sR0FBRyxJQUFJLGdCQUFNLENBQUMsTUFBTSxFQUFFLGdCQUFnQixFQUFFLElBQUksV0FBSSxDQUFDLElBQUEsY0FBTyxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxJQUFBLGNBQU8sRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hHLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDO0FBQzFDLENBQUMsQ0FBQyxDQUFDO0FBRUgsaUNBQWlDO0FBQ2pDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7SUFDYixLQUFLLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUN4QixNQUFNLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDbkMsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFN0MsSUFBQSxxQkFBWSxFQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUU1QyxLQUFLLElBQUksT0FBTyxJQUFJLE9BQU8sRUFBRTtZQUN6QixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUU7Z0JBQ3pDLElBQUEscUJBQVksRUFBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzthQUMxQztTQUNKO0tBQ0o7QUFDTCxDQUFDLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHdzIGZyb20gJ3dzJztcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgUGxheWVyIGZyb20gJy4vbW9kdWxlcy9wbGF5ZXInO1xuaW1wb3J0IHsgcmFuZEludCwgVmVjMiB9IGZyb20gJy4vbW9kdWxlcy9tYXRoJztcbmltcG9ydCB7IHBsYXllclVwZGF0ZSB9IGZyb20gJy4vbW9kdWxlcy9zb2NrZXQnO1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMoam9pbihfX2Rpcm5hbWUsIFwiLi4vXCIsIFwiLi4vXCIsIFwicHVibGljXCIpKSk7XG5cbmNvbnNvbGUubG9nKF9fZGlybmFtZSk7XG5cbmNvbnN0IHNlcnZlciA9IGFwcC5saXN0ZW4oNjk2OSwgJzAuMC4wLjAnLCAoKSA9PiB7IC8vIHJldHVybnMgYSBzZXJ2ZXJcbiAgICBjb25zb2xlLmxvZyhcIlJlYWR5IVwiKTtcbn0pO1xuXG5jb25zdCB3c3MgPSBuZXcgd3MuU2VydmVyKHsgc2VydmVyIH0pO1xuXG5jb25zdCBwbGF5ZXJzOiBQbGF5ZXJbXSA9IFtdO1xuY29uc3QgYmxvYnM6IEJsb2JbXSA9IFtdO1xuXG53c3Mub24oJ2Nvbm5lY3Rpb24nLCAoc29ja2V0LCByZXEpID0+IHtcbiAgICBjb25zdCBwbGF5ZXIgPSBuZXcgUGxheWVyKHNvY2tldCwgXCJVbm5hbWVkIFBsYXllclwiLCBuZXcgVmVjMihyYW5kSW50KDEwMDAsIDEyMDApLCByYW5kSW50KDEwMDAsIDEyMDApKSk7XG4gICAgcGxheWVycy5wdXNoKHBsYXllcik7XG4gICAgY29uc29sZS5sb2coYCR7cGxheWVyLm5hbWV9IGpvaW5lZCFgKTtcbn0pO1xuXG4vLyBUaW1pbmcgdGhpbmdzOyBuaWdodG1hcmUhIFlFRVRcbnNldEludGVydmFsKCgpID0+IHtcbiAgICBmb3IgKGxldCBwbGF5ZXIgb2YgcGxheWVycykge1xuICAgICAgICBwbGF5ZXIudmVsb2NpdHkgPSBwbGF5ZXIuZGlyZWN0aW9uO1xuICAgICAgICBwbGF5ZXIucG9zID0gcGxheWVyLnBvcy5hZGQocGxheWVyLnZlbG9jaXR5KTtcblxuICAgICAgICBwbGF5ZXJVcGRhdGUocGxheWVyLnNvY2tldCwgW3BsYXllcl0sIHRydWUpO1xuICAgICAgICBcbiAgICAgICAgZm9yIChsZXQgcGxheWVyMiBvZiBwbGF5ZXJzKSB7XG4gICAgICAgICAgICBpZiAocGxheWVyMi5wb3MuZGlzdGFuY2UocGxheWVyLnBvcykgPiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyVXBkYXRlKHBsYXllcjIuc29ja2V0LCBbcGxheWVyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59LCAxMDAwIC8gMjApO1xuIl19